@tailwind base;
@tailwind components;
@tailwind utilities;

/**
	Create content width

	We are avoiding min(), max(), clamp() to support old devices. Normally using following is easier 

	--width: min( 75%, 1650px );

	This approach uses media queries to set --width to 1650px when the viewport is wider than 2200px (which is 75% of 2200px). 
	You can adjust the 2200px to match the exact breakpoint where 1650px should be used instead of 75%.
*/
:root {
	--background: #ffffff;
	--foreground: #171717;
	--width: 90vw;
	/** 
		To be able to discard scrollbar width, we use % 
	*/
	--content-outside-width: calc( ( 100% - var( --width ) ) / 2 );
	/** 
		To be able to use as spacing units (height, margin, ...) value, we use VW 
	*/
	--spacing-base: calc( ( 100vw - var( --width ) ) / 2 );
	/** 
		Spacing variations 
	*/
	--spacing-xs: calc( 0.25 * var( --spacing-base ) );
	--spacing-sm: calc( 0.5 * var( --spacing-base ) );
	--spacing-lg: calc( 1.5 * var( --spacing-base ) );
	--spacing-xl: calc( 3 * var( --spacing-base ) );
	--spacing-2xl: calc( 4 * var( --spacing-base ) );
	--spacing-3xl: calc( 5 * var( --spacing-base ) );
}
@media ( orientation: landscape ){
    :root {
        --width: 75vw;
		--spacing-base: 2rem;
    }
}
@media ( min-width: 2200px ){
    :root {
        --width: 1650px;
    }
}



body {
	color: var(--foreground);
	background: var(--background);
	font-family: Arial, Helvetica, sans-serif;
}


/**
	----------------------------------------------------------------------
	BASE STYLES
	----------------------------------------------------------------------
*/
@layer base {

	h1 {
		@apply text-3xl;
	}
	h2 {
		@apply text-2xl;
	}
	h3 {
		@apply text-xl;
	}
	h4 {
		@apply text-lg;
	}

}


@layer components {
	.container {
		@apply
		w-[var(--width)]
		max-w-[var(--width)]
		mx-auto
	}
	.pointer {
		--cursor-size: max( 15px, calc( 100vw / 60 ) );
		background-color: #FF0000;
		opacity: .75;
		border-radius: 50%;
		position: fixed;
		top: 0;
		left: 0;
		height: var(--cursor-size);
		width: var(--cursor-size);
		transform: translate3d( calc( var( --x ) - var( --cursor-size ) / 2 ), calc( var( --y ) - var( --cursor-size ) / 2 ), 0 );
		pointer-events: none;
		touch-action: none;
		user-select: none;
		z-index: 9999;
	}
}


@layer utilities {
	.text-balance {
		text-wrap: balance;
	}
	.form label {
		@apply
		block mb-2 text-base font-medium text-gray-900 dark:text-white
	}
	
	.form .checkbox {
		@apply
		flex flex-col mb-1
	}
	
	.form .checkbox > fieldset {
		@apply
		flex
	}
	
	.form .checkbox label {
		@apply
		ms-1 text-base font-medium text-gray-900 dark:text-gray-300 whitespace-nowrap
	}
	
	.form input[ type=checkbox ] {
		@apply
		w-6 h-6 border border-gray-300 rounded bg-gray-50 focus:ring-blue-300
	}
	
	.form input[ type=number ] {
		@apply
		p-2 text-base text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 leading-none
	}
	
	.form select {
		@apply
		block text-base bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 w-full p-2
	}
	
}