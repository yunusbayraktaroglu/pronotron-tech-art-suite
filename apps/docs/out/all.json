{
	"schemaVersion": "2.0",
	"id": 350,
	"name": "pronotron-tech-art-suite",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 515,
			"name": "@pronotron/io",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 516,
					"name": "PronotronIOHorizontalObserver",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "PronotronIO - A custom intersection observer solution"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst pronotronIO = new PronotronIOHorizontalObserver();\r\npronotronIO.setLastScroll( 0 );\r\npronotronIO.addNode({\r\n\tref: HTMLElement,\r\n\tdispatch: {\r\n\t\tonInViewport: ( normalizedPosition: number ) => console.log( \"Element is in viewport\", normalizedPosition ),\r\n\t\tonLeftEnter: () => console.log( \"Element entered from left\" ),\r\n\t\tonLeftExit: {\r\n\t\t\tdispatch: () => console.log( \"Element exited from left\" ),\r\n\t\t\tlimit: 2\r\n\t\t},\r\n\t\tonRightEnter...,\r\n\t\tonRightExit...,\r\n\t\tonFastForward: \"execute_both\",\r\n\t},\r\n\tonRemoveNode: () => element.dataset.ioActive = \"0\",\r\n\tgetBounds: () => {\r\n\t\tconst { left, right } = element.getBoundingClientRect();\r\n\t\tconst start = left + window.scrollX;\r\n\t\tconst end = right + window.scrollX;\r\n\t\treturn { start, end };\r\n\t}\r\n\toffset: 100, // In pixels, applied to both directions\r\n});\r\n// Recommended: wrap in a throttled handler for performance\r\nwindow.addEventListener( 'scroll', () => pronotronIO.handleScroll( window.scrollX ) );\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 517,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "PronotronIOBase.ts",
									"line": 223,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L223"
								}
							],
							"signatures": [
								{
									"id": 518,
									"name": "PronotronIOHorizontalObserver",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "PronotronIOBase.ts",
											"line": 223,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L223"
										}
									],
									"parameters": [
										{
											"id": 519,
											"name": "nodeCountHint",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "To populate fixed typed array length, will be expanded if needed"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "20"
										},
										{
											"id": 520,
											"name": "useRounded",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Whether integers are used instead of floating-point numbers. Default is true."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "true"
										}
									],
									"type": {
										"type": "reference",
										"target": 516,
										"name": "PronotronIOHorizontalObserver",
										"package": "@pronotron/io"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher<HorizontalEvent>.constructor",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher<HorizontalEvent>.constructor",
								"package": "@pronotron/io"
							}
						},
						{
							"id": 521,
							"name": "direction",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Current scroll direction (based on the last scroll value)."
									}
								]
							},
							"sources": [
								{
									"fileName": "PronotronIOHorizontal.ts",
									"line": 40,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOHorizontal.ts#L40"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "left"
									},
									{
										"type": "literal",
										"value": "right"
									}
								]
							},
							"defaultValue": "\"right\"",
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.direction"
							}
						},
						{
							"id": 522,
							"name": "addNode",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "PronotronIOBase.ts",
									"line": 241,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L241"
								}
							],
							"signatures": [
								{
									"id": 523,
									"name": "addNode",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Creates an IONode."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "false if error, IONode internal id if success"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "PronotronIOBase.ts",
											"line": 241,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L241"
										}
									],
									"parameters": [
										{
											"id": 524,
											"name": "newNodeOptions",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "IONode creation options"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@pronotron/io",
													"packagePath": "types/global.d.ts",
													"qualifiedName": "IONodeOptions"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@pronotron/io",
															"packagePath": "src/core/PronotronIOHorizontal.ts",
															"qualifiedName": "HorizontalEvent"
														},
														"name": "HorizontalEvent",
														"package": "@pronotron/io"
													}
												],
												"name": "IONodeOptions",
												"package": "@pronotron/io"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "literal",
												"value": false
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher.addNode",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.addNode",
								"package": "@pronotron/io"
							}
						},
						{
							"id": 525,
							"name": "handleScroll",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "PronotronIOEventDispatcher.ts",
									"line": 95,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOEventDispatcher.ts#L95"
								}
							],
							"signatures": [
								{
									"id": 526,
									"name": "handleScroll",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Handles scroll events and updates the current scroll direction,\r\nthen recalculates intersections."
											}
										]
									},
									"sources": [
										{
											"fileName": "PronotronIOEventDispatcher.ts",
											"line": 95,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOEventDispatcher.ts#L95"
										}
									],
									"parameters": [
										{
											"id": 527,
											"name": "scrollValue",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Current scroll value"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher.handleScroll",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.handleScroll",
								"package": "@pronotron/io"
							}
						},
						{
							"id": 528,
							"name": "removeNode",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "PronotronIOBase.ts",
									"line": 286,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L286"
								}
							],
							"signatures": [
								{
									"id": 529,
									"name": "removeNode",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes an IONode by its ref "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "PronotronIONodeRef",
												"target": {
													"packageName": "@pronotron/io",
													"packagePath": "types/global.d.ts",
													"qualifiedName": "PronotronIONodeRef"
												}
											}
										]
									},
									"sources": [
										{
											"fileName": "PronotronIOBase.ts",
											"line": 286,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L286"
										}
									],
									"parameters": [
										{
											"id": 530,
											"name": "existingNodeRef",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Reference passed while executing addNode()"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.dom.d.ts",
													"qualifiedName": "HTMLElement"
												},
												"name": "HTMLElement",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher.removeNode",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.removeNode",
								"package": "@pronotron/io"
							}
						},
						{
							"id": 531,
							"name": "setLastScroll",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "PronotronIOBase.ts",
									"line": 302,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L302"
								}
							],
							"signatures": [
								{
									"id": 532,
									"name": "setLastScroll",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Modifies the last scroll value"
											}
										]
									},
									"sources": [
										{
											"fileName": "PronotronIOBase.ts",
											"line": 302,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L302"
										}
									],
									"parameters": [
										{
											"id": 533,
											"name": "scrollValue",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Scroll value"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher.setLastScroll",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.setLastScroll",
								"package": "@pronotron/io"
							}
						},
						{
							"id": 534,
							"name": "updatePositions",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "PronotronIOBase.ts",
									"line": 315,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L315"
								}
							],
							"signatures": [
								{
									"id": 535,
									"name": "updatePositions",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Bulk updates all IONode positions.\r\nShould be executed when the layout changes, e.g.:\r\n- Screen resize\r\n- Resizing in-page elements (accordion, etc.)"
											}
										]
									},
									"sources": [
										{
											"fileName": "PronotronIOBase.ts",
											"line": 315,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L315"
										}
									],
									"parameters": [
										{
											"id": 536,
											"name": "maximumValue",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Maximum possible position (e.g., "
													},
													{
														"kind": "code",
														"text": "`document.documentElement.scrollHeight`"
													},
													{
														"kind": "text",
														"text": ")."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher.updatePositions",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.updatePositions",
								"package": "@pronotron/io"
							}
						},
						{
							"id": 537,
							"name": "updateViewportLayout",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "PronotronIOBase.ts",
									"line": 333,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L333"
								}
							],
							"signatures": [
								{
									"id": 538,
									"name": "updateViewportLayout",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Updates viewport layout data used in calculations.\r\nShould be called on:\r\n- Mobile viewport changes (status bar collapse/expand)\r\n- Pinch-zoom changes\r\n- Screen or in-page resizes"
											}
										]
									},
									"sources": [
										{
											"fileName": "PronotronIOBase.ts",
											"line": 333,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L333"
										}
									],
									"parameters": [
										{
											"id": 539,
											"name": "start",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Start position of the viewport."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 540,
											"name": "end",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "End position of the viewport."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher.updateViewportLayout",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.updateViewportLayout",
								"package": "@pronotron/io"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								517
							]
						},
						{
							"title": "Properties",
							"children": [
								521
							]
						},
						{
							"title": "Methods",
							"children": [
								522,
								525,
								528,
								531,
								534,
								537
							]
						}
					],
					"sources": [
						{
							"fileName": "PronotronIOHorizontal.ts",
							"line": 38,
							"character": 13,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOHorizontal.ts#L38"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"packageName": "@pronotron/io",
								"packagePath": "src/core/PronotronIOEventDispatcher.ts",
								"qualifiedName": "PronotronIOEventDispatcher"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": {
										"packageName": "@pronotron/io",
										"packagePath": "src/core/PronotronIOHorizontal.ts",
										"qualifiedName": "HorizontalEvent"
									},
									"name": "HorizontalEvent",
									"package": "@pronotron/io"
								}
							],
							"name": "PronotronIOEventDispatcher",
							"package": "@pronotron/io"
						}
					]
				},
				{
					"id": 541,
					"name": "PronotronIOVerticalObserver",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "PronotronIO - A custom intersection observer solution"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst pronotronIO = new PronotronIOVerticalObserver();\r\npronotronIO.setLastScroll( 0 );\r\npronotronIO.addNode({\r\n\tref: HTMLElement,\r\n\tdispatch: {\r\n\t\tonInViewport: ( normalizedPosition: number ) => console.log( \"Element is in viewport\", normalizedPosition ),\r\n\t\tonTopEnter: () => console.log( \"Element entered from top\" ),\r\n\t\tonTopExit: {\r\n\t\t\tdispatch: () => console.log( \"Element exited from top\" ),\r\n\t\t\tlimit: 2\r\n\t\t},\r\n\t\tonBottomEnter...,\r\n\t\tonBottomExit...,\r\n\t\tonFastForward: \"execute_both\",\r\n\t},\r\n\tonRemoveNode: () => element.dataset.ioActive = \"0\",\r\n\tgetBounds: () => {\r\n\t\tconst { top, bottom } = element.getBoundingClientRect();\r\n\t\tconst start = top + window.scrollY;\r\n\t\tconst end = bottom + window.scrollY;\r\n\t\treturn { start, end };\r\n\t}\r\n\toffset: 100, // In pixels, applied to both directions\r\n});\r\n// Recommended: wrap in a throttled handler for performance\r\nwindow.addEventListener( 'scroll', () => pronotronIO.handleScroll( window.scrollY ) );\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 542,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "PronotronIOBase.ts",
									"line": 223,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L223"
								}
							],
							"signatures": [
								{
									"id": 543,
									"name": "PronotronIOVerticalObserver",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "PronotronIOBase.ts",
											"line": 223,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L223"
										}
									],
									"parameters": [
										{
											"id": 544,
											"name": "nodeCountHint",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "To populate fixed typed array length, will be expanded if needed"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "20"
										},
										{
											"id": 545,
											"name": "useRounded",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Whether integers are used instead of floating-point numbers. Default is true."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "true"
										}
									],
									"type": {
										"type": "reference",
										"target": 541,
										"name": "PronotronIOVerticalObserver",
										"package": "@pronotron/io"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher<VerticalEvent>.constructor",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher<VerticalEvent>.constructor",
								"package": "@pronotron/io"
							}
						},
						{
							"id": 546,
							"name": "direction",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Current scroll direction (based on the last scroll value)."
									}
								]
							},
							"sources": [
								{
									"fileName": "PronotronIOVertical.ts",
									"line": 40,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOVertical.ts#L40"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "up"
									},
									{
										"type": "literal",
										"value": "down"
									}
								]
							},
							"defaultValue": "\"down\"",
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.direction"
							}
						},
						{
							"id": 547,
							"name": "addNode",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "PronotronIOBase.ts",
									"line": 241,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L241"
								}
							],
							"signatures": [
								{
									"id": 548,
									"name": "addNode",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Creates an IONode."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "false if error, IONode internal id if success"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "PronotronIOBase.ts",
											"line": 241,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L241"
										}
									],
									"parameters": [
										{
											"id": 549,
											"name": "newNodeOptions",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "IONode creation options"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@pronotron/io",
													"packagePath": "types/global.d.ts",
													"qualifiedName": "IONodeOptions"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@pronotron/io",
															"packagePath": "src/core/PronotronIOVertical.ts",
															"qualifiedName": "VerticalEvent"
														},
														"name": "VerticalEvent",
														"package": "@pronotron/io"
													}
												],
												"name": "IONodeOptions",
												"package": "@pronotron/io"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "literal",
												"value": false
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher.addNode",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.addNode",
								"package": "@pronotron/io"
							}
						},
						{
							"id": 550,
							"name": "handleScroll",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "PronotronIOEventDispatcher.ts",
									"line": 95,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOEventDispatcher.ts#L95"
								}
							],
							"signatures": [
								{
									"id": 551,
									"name": "handleScroll",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Handles scroll events and updates the current scroll direction,\r\nthen recalculates intersections."
											}
										]
									},
									"sources": [
										{
											"fileName": "PronotronIOEventDispatcher.ts",
											"line": 95,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOEventDispatcher.ts#L95"
										}
									],
									"parameters": [
										{
											"id": 552,
											"name": "scrollValue",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Current scroll value"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher.handleScroll",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.handleScroll",
								"package": "@pronotron/io"
							}
						},
						{
							"id": 553,
							"name": "removeNode",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "PronotronIOBase.ts",
									"line": 286,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L286"
								}
							],
							"signatures": [
								{
									"id": 554,
									"name": "removeNode",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes an IONode by its ref "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "PronotronIONodeRef",
												"target": {
													"packageName": "@pronotron/io",
													"packagePath": "types/global.d.ts",
													"qualifiedName": "PronotronIONodeRef"
												}
											}
										]
									},
									"sources": [
										{
											"fileName": "PronotronIOBase.ts",
											"line": 286,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L286"
										}
									],
									"parameters": [
										{
											"id": 555,
											"name": "existingNodeRef",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Reference passed while executing addNode()"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.dom.d.ts",
													"qualifiedName": "HTMLElement"
												},
												"name": "HTMLElement",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher.removeNode",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.removeNode",
								"package": "@pronotron/io"
							}
						},
						{
							"id": 556,
							"name": "setLastScroll",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "PronotronIOBase.ts",
									"line": 302,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L302"
								}
							],
							"signatures": [
								{
									"id": 557,
									"name": "setLastScroll",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Modifies the last scroll value"
											}
										]
									},
									"sources": [
										{
											"fileName": "PronotronIOBase.ts",
											"line": 302,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L302"
										}
									],
									"parameters": [
										{
											"id": 558,
											"name": "scrollValue",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Scroll value"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher.setLastScroll",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.setLastScroll",
								"package": "@pronotron/io"
							}
						},
						{
							"id": 559,
							"name": "updatePositions",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "PronotronIOBase.ts",
									"line": 315,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L315"
								}
							],
							"signatures": [
								{
									"id": 560,
									"name": "updatePositions",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Bulk updates all IONode positions.\r\nShould be executed when the layout changes, e.g.:\r\n- Screen resize\r\n- Resizing in-page elements (accordion, etc.)"
											}
										]
									},
									"sources": [
										{
											"fileName": "PronotronIOBase.ts",
											"line": 315,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L315"
										}
									],
									"parameters": [
										{
											"id": 561,
											"name": "maximumValue",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Maximum possible position (e.g., "
													},
													{
														"kind": "code",
														"text": "`document.documentElement.scrollHeight`"
													},
													{
														"kind": "text",
														"text": ")."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher.updatePositions",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.updatePositions",
								"package": "@pronotron/io"
							}
						},
						{
							"id": 562,
							"name": "updateViewportLayout",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "PronotronIOBase.ts",
									"line": 333,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L333"
								}
							],
							"signatures": [
								{
									"id": 563,
									"name": "updateViewportLayout",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Updates viewport layout data used in calculations.\r\nShould be called on:\r\n- Mobile viewport changes (status bar collapse/expand)\r\n- Pinch-zoom changes\r\n- Screen or in-page resizes"
											}
										]
									},
									"sources": [
										{
											"fileName": "PronotronIOBase.ts",
											"line": 333,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOBase.ts#L333"
										}
									],
									"parameters": [
										{
											"id": 564,
											"name": "start",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Start position of the viewport."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 565,
											"name": "end",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "End position of the viewport."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PronotronIOEventDispatcher.updateViewportLayout",
										"package": "@pronotron/io"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PronotronIOEventDispatcher.updateViewportLayout",
								"package": "@pronotron/io"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								542
							]
						},
						{
							"title": "Properties",
							"children": [
								546
							]
						},
						{
							"title": "Methods",
							"children": [
								547,
								550,
								553,
								556,
								559,
								562
							]
						}
					],
					"sources": [
						{
							"fileName": "PronotronIOVertical.ts",
							"line": 38,
							"character": 13,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOVertical.ts#L38"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"packageName": "@pronotron/io",
								"packagePath": "src/core/PronotronIOEventDispatcher.ts",
								"qualifiedName": "PronotronIOEventDispatcher"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": {
										"packageName": "@pronotron/io",
										"packagePath": "src/core/PronotronIOVertical.ts",
										"qualifiedName": "VerticalEvent"
									},
									"name": "VerticalEvent",
									"package": "@pronotron/io"
								}
							],
							"name": "PronotronIOEventDispatcher",
							"package": "@pronotron/io"
						}
					]
				},
				{
					"id": 566,
					"name": "IOHorizontalOptions",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"sources": [
						{
							"fileName": "PronotronIOHorizontal.ts",
							"line": 5,
							"character": 12,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOHorizontal.ts#L5"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"packageName": "@pronotron/io",
							"packagePath": "types/global.d.ts",
							"qualifiedName": "IONodeOptions"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"packageName": "@pronotron/io",
									"packagePath": "src/core/PronotronIOHorizontal.ts",
									"qualifiedName": "HorizontalEvent"
								},
								"name": "HorizontalEvent",
								"package": "@pronotron/io"
							}
						],
						"name": "IONodeOptions",
						"package": "@pronotron/io"
					}
				},
				{
					"id": 567,
					"name": "IOVerticalOptions",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"sources": [
						{
							"fileName": "PronotronIOVertical.ts",
							"line": 5,
							"character": 12,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-io/src/core/PronotronIOVertical.ts#L5"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"packageName": "@pronotron/io",
							"packagePath": "types/global.d.ts",
							"qualifiedName": "IONodeOptions"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"packageName": "@pronotron/io",
									"packagePath": "src/core/PronotronIOVertical.ts",
									"qualifiedName": "VerticalEvent"
								},
								"name": "VerticalEvent",
								"package": "@pronotron/io"
							}
						],
						"name": "IONodeOptions",
						"package": "@pronotron/io"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						516,
						541
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						566,
						567
					]
				}
			],
			"readme": [
				{
					"kind": "text",
					"text": "# @pronotron/io\n\n[![NPM Package][npm]][npm-url]\n[![Build Size][build-size]][build-size-url]\n\nReliable viewport tracking without missed targets, unlike the built-in [IntersectionObserver API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API). \n\nBuilt on [NativeControlTable](https://www.npmjs.com/package/@pronotron/utils), it can safely be used for parallax effects, lazy loading, or tracking when any part of an element enters or exits the screen. Suitable for implementing any custom scrolling application.\n\n### Usage\n\n"
				},
				{
					"kind": "code",
					"text": "```typescript\nimport { PronotronIOVerticalObserver, PronotronIOHorizontalObserver } from '@pronotron/io';\n\nexport const pronotronIO = new PronotronIOVerticalObserver();\n\nconst getViewport = () => {\n\tif ( window.visualViewport ){\n\t\treturn {\n\t\t\theight: window.visualViewport.height,\n\t\t\toffsetTop: window.visualViewport.offsetTop,\n\t\t\tscale: window.visualViewport.scale,\n\t\t};\n\t}\n\treturn {\n\t\theight: window.innerHeight,\n\t\toffsetTop: 0,\n\t\tscale: 1,\n\t};\n};\nconst onScroll = () => {\n\tpronotronIO.handleScroll( window.scrollY )\n\tsetScrollDirection( pronotronIO.direction );\n};\nconst onResize = () => {\n\tconst vp = getViewport();\n\tpronotronIO.updateViewportLayout( vp.offsetTop, vp.offsetTop + vp.height );\n\t// Resizing updates layout. Needs recalculate node bounds\n\tpronotronIO.updatePositions( document.documentElement.scrollHeight );\n\tonScroll();\n};\n\n/**\n * TIP: It's better to use with a throttle function and RequestAnimationFrame API to optimize \n */\nwindow.addEventListener( 'scroll', onScroll, { passive: true } );\n\n/**\n * (x) window.addEventListener( 'resize', onResize );\n * \n * - Do not use window.resize event, it's firing every scroll in mobile devices because of topbar behavior.\n * - May use ResizeObserverPolyfill from '@juggle/resize-observer' to support old devices.\n */\nconst ResizeObserver = window.ResizeObserver | ResizeObserverPolyfill;\nconst ro = new ResizeObserver(( entries, observer ) => {\n\tonResize();\n});\nro.observe( document.body );\n```"
				},
				{
					"kind": "text",
					"text": "\n\n### Observing\n\n"
				},
				{
					"kind": "code",
					"text": "```typescript\nconst element = document.getElementByID( \"test\" );\n\nconst nodeID = pronotronIO.addNode({\n\tref: element,\n\tdispatch: {\n\t\t// Vertical events\n\t\tonTopEnter: () => console.log( \"Top-enter\" ),\n\t\tonTopExit: () => console.log( \"Top-exit\" ),\n\t\tonBottomEnter: () => console.log( \"Bottom-enter\" ),\n\t\tonBottomExit: {\n\t\t\tlimit: 3,\n\t\t\tdispatch: () => console.log( \"Bottom-exit\" ),\n\t\t},\n\t\t// Returns -1 to +1 normalized position\n\t\tonInViewport: ( normalizedPosition: number ) => {\n\t\t\tconsole.log( normalizedPosition );\n\t\t},\n\t\t// On jumpy scrolls a node may bottom-enter then top-exit in same loop\n\t\tonFastForward: \"execute_both\" // \"skip_both\" | \"execute_last\"\n\t},\n\toffset: 10, // increases bounds in pixels\n\tonRemoveNode: () => element.dataset.ioActive = \"0\",\n\tgetBounds: () => {\n\t\tconst { top, bottom } = element.getBoundingClientRect();\n\t\treturn { \n\t\t\tstart: top + window.scrollY, \n\t\t\tend: bottom + window.scrollY \n\t\t};\n\t},\n});\n```"
				},
				{
					"kind": "text",
					"text": "\n\n[npm]: https://img.shields.io/npm/v/@pronotron/io\n[npm-url]: https://www.npmjs.com/package/@pronotron/io\n[build-size]: https://badgen.net/bundlephobia/minzip/@pronotron/io\n[build-size-url]: https://bundlephobia.com/result?p=@pronotron/io"
				}
			]
		},
		{
			"id": 449,
			"name": "@pronotron/pointer",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 450,
					"name": "MouseController",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "MouseController\r\n\r\nHandles mouse-based pointer interactions."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\r\nconst controller = new MouseController( ...dependencies );\r\n// Start\r\ncontroller.startEvents();\r\n// Dispose\r\ncontroller.stopEvents();\r\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 451,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "model/Mouse.ts",
									"line": 29,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Mouse.ts#L29"
								}
							],
							"signatures": [
								{
									"id": 452,
									"name": "MouseController",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "model/Mouse.ts",
											"line": 29,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Mouse.ts#L29"
										}
									],
									"parameters": [
										{
											"id": 453,
											"name": "dependencies",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 500,
														"name": "PointerBaseDependencies",
														"package": "@pronotron/pointer"
													},
													{
														"type": "reference",
														"target": 509,
														"name": "PointerHoldableDependencies",
														"package": "@pronotron/pointer"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 450,
										"name": "MouseController",
										"package": "@pronotron/pointer"
									},
									"overwrites": {
										"type": "reference",
										"target": -1,
										"name": "ModelController.constructor",
										"package": "@pronotron/pointer"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "ModelController.constructor",
								"package": "@pronotron/pointer"
							}
						},
						{
							"id": 454,
							"name": "canInteract",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "model/ModelController.ts",
									"line": 64,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L64"
								}
							],
							"signatures": [
								{
									"id": 455,
									"name": "canInteract",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Indicates whether the element currently under the pointer, satisfies the user-supplied "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "_isInteractable"
											},
											{
												"kind": "text",
												"text": " check."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "True if the active event target is interactable."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "model/ModelController.ts",
											"line": 64,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L64"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ModelController.canInteract"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ModelController.canInteract"
							}
						},
						{
							"id": 456,
							"name": "getDelta",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "model/ModelController.ts",
									"line": 88,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L88"
								}
							],
							"signatures": [
								{
									"id": 457,
									"name": "getDelta",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Pixel delta of the pointer since the previous update."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Object with "
													},
													{
														"kind": "code",
														"text": "`{ x, y }`"
													},
													{
														"kind": "text",
														"text": " movement in pixels."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "model/ModelController.ts",
											"line": 88,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L88"
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 458,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 459,
													"name": "x",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "model/ModelController.ts",
															"line": 88,
															"character": 15,
															"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L88"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 460,
													"name": "y",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "model/ModelController.ts",
															"line": 88,
															"character": 26,
															"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L88"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														459,
														460
													]
												}
											],
											"sources": [
												{
													"fileName": "model/ModelController.ts",
													"line": 88,
													"character": 13,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L88"
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ModelController.getDelta",
										"package": "@pronotron/pointer"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ModelController.getDelta",
								"package": "@pronotron/pointer"
							}
						},
						{
							"id": 461,
							"name": "getPosition",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "model/ModelController.ts",
									"line": 74,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L74"
								}
							],
							"signatures": [
								{
									"id": 462,
									"name": "getPosition",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Latest pointer coordinates in screen pixels."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Object with "
													},
													{
														"kind": "code",
														"text": "`{ x, y }`"
													},
													{
														"kind": "text",
														"text": " screen coordinates."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "model/ModelController.ts",
											"line": 74,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L74"
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 463,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 464,
													"name": "x",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "model/ModelController.ts",
															"line": 74,
															"character": 18,
															"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L74"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 465,
													"name": "y",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "model/ModelController.ts",
															"line": 74,
															"character": 29,
															"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L74"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														464,
														465
													]
												}
											],
											"sources": [
												{
													"fileName": "model/ModelController.ts",
													"line": 74,
													"character": 16,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L74"
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ModelController.getPosition",
										"package": "@pronotron/pointer"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ModelController.getPosition",
								"package": "@pronotron/pointer"
							}
						},
						{
							"id": 466,
							"name": "getState",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "model/ModelController.ts",
									"line": 53,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L53"
								}
							],
							"signatures": [
								{
									"id": 467,
									"name": "getState",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the current pointer state as a human-readable string,\r\ne.g. \"IDLE\", \"MOVING\"."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Current state name from "
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "PointerState",
														"target": {
															"packageName": "@pronotron/pointer",
															"packagePath": "src/core/PointerBase.ts",
															"qualifiedName": "PointerState"
														}
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "model/ModelController.ts",
											"line": 53,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L53"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ModelController.getState"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ModelController.getState"
							}
						},
						{
							"id": 468,
							"name": "startEvents",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "model/Mouse.ts",
									"line": 45,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Mouse.ts#L45"
								}
							],
							"signatures": [
								{
									"id": 469,
									"name": "startEvents",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Starts listening for mouse-related pointer events.\r\nMust be called before interaction can be tracked."
											}
										]
									},
									"sources": [
										{
											"fileName": "model/Mouse.ts",
											"line": 45,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Mouse.ts#L45"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 470,
							"name": "stopEvents",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "model/Mouse.ts",
									"line": 63,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Mouse.ts#L63"
								}
							],
							"signatures": [
								{
									"id": 471,
									"name": "stopEvents",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Stops and removes all registered mouse event listeners.\r\nShould be called during cleanup or disposal."
											}
										]
									},
									"sources": [
										{
											"fileName": "model/Mouse.ts",
											"line": 63,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Mouse.ts#L63"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 472,
							"name": "updateSettings",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "model/ModelController.ts",
									"line": 30,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L30"
								}
							],
							"signatures": [
								{
									"id": 473,
									"name": "updateSettings",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Updates settings of the pointer controller"
											}
										]
									},
									"sources": [
										{
											"fileName": "model/ModelController.ts",
											"line": 30,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L30"
										}
									],
									"parameters": [
										{
											"id": 474,
											"name": "settings",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "@pronotron/pointer",
															"packagePath": "src/core/PointerBase.ts",
															"qualifiedName": "BaseSettings"
														},
														"name": "BaseSettings",
														"package": "@pronotron/pointer"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "@pronotron/pointer",
															"packagePath": "src/core/PointerHoldable.ts",
															"qualifiedName": "HoldableSettings"
														},
														"name": "HoldableSettings",
														"package": "@pronotron/pointer"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ModelController.updateSettings",
										"package": "@pronotron/pointer"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ModelController.updateSettings",
								"package": "@pronotron/pointer"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								451
							]
						},
						{
							"title": "Methods",
							"children": [
								454,
								456,
								461,
								466,
								468,
								470,
								472
							]
						}
					],
					"sources": [
						{
							"fileName": "model/Mouse.ts",
							"line": 19,
							"character": 13,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Mouse.ts#L19"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"packageName": "@pronotron/pointer",
								"packagePath": "src/core/model/ModelController.ts",
								"qualifiedName": "ModelController"
							},
							"name": "ModelController",
							"package": "@pronotron/pointer"
						}
					]
				},
				{
					"id": 475,
					"name": "TouchController",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "TouchController\r\n\r\nHandles touch-based pointer."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\r\nconst controller = new TouchController( ...dependencies );\r\n// Start\r\ncontroller.startEvents();\r\n// Dispose\r\ncontroller.stopEvents();\r\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 476,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "model/Touch.ts",
									"line": 21,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Touch.ts#L21"
								}
							],
							"signatures": [
								{
									"id": 477,
									"name": "TouchController",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "model/Touch.ts",
											"line": 21,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Touch.ts#L21"
										}
									],
									"parameters": [
										{
											"id": 478,
											"name": "dependencies",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 500,
														"name": "PointerBaseDependencies",
														"package": "@pronotron/pointer"
													},
													{
														"type": "reference",
														"target": 509,
														"name": "PointerHoldableDependencies",
														"package": "@pronotron/pointer"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 475,
										"name": "TouchController",
										"package": "@pronotron/pointer"
									},
									"overwrites": {
										"type": "reference",
										"target": -1,
										"name": "ModelController.constructor",
										"package": "@pronotron/pointer"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "ModelController.constructor",
								"package": "@pronotron/pointer"
							}
						},
						{
							"id": 479,
							"name": "canInteract",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "model/ModelController.ts",
									"line": 64,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L64"
								}
							],
							"signatures": [
								{
									"id": 480,
									"name": "canInteract",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Indicates whether the element currently under the pointer, satisfies the user-supplied "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "_isInteractable"
											},
											{
												"kind": "text",
												"text": " check."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "True if the active event target is interactable."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "model/ModelController.ts",
											"line": 64,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L64"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ModelController.canInteract"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ModelController.canInteract"
							}
						},
						{
							"id": 481,
							"name": "getDelta",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "model/ModelController.ts",
									"line": 88,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L88"
								}
							],
							"signatures": [
								{
									"id": 482,
									"name": "getDelta",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Pixel delta of the pointer since the previous update."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Object with "
													},
													{
														"kind": "code",
														"text": "`{ x, y }`"
													},
													{
														"kind": "text",
														"text": " movement in pixels."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "model/ModelController.ts",
											"line": 88,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L88"
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 483,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 484,
													"name": "x",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "model/ModelController.ts",
															"line": 88,
															"character": 15,
															"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L88"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 485,
													"name": "y",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "model/ModelController.ts",
															"line": 88,
															"character": 26,
															"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L88"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														484,
														485
													]
												}
											],
											"sources": [
												{
													"fileName": "model/ModelController.ts",
													"line": 88,
													"character": 13,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L88"
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ModelController.getDelta",
										"package": "@pronotron/pointer"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ModelController.getDelta",
								"package": "@pronotron/pointer"
							}
						},
						{
							"id": 486,
							"name": "getPosition",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "model/ModelController.ts",
									"line": 74,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L74"
								}
							],
							"signatures": [
								{
									"id": 487,
									"name": "getPosition",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Latest pointer coordinates in screen pixels."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Object with "
													},
													{
														"kind": "code",
														"text": "`{ x, y }`"
													},
													{
														"kind": "text",
														"text": " screen coordinates."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "model/ModelController.ts",
											"line": 74,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L74"
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 488,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 489,
													"name": "x",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "model/ModelController.ts",
															"line": 74,
															"character": 18,
															"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L74"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 490,
													"name": "y",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "model/ModelController.ts",
															"line": 74,
															"character": 29,
															"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L74"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														489,
														490
													]
												}
											],
											"sources": [
												{
													"fileName": "model/ModelController.ts",
													"line": 74,
													"character": 16,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L74"
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ModelController.getPosition",
										"package": "@pronotron/pointer"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ModelController.getPosition",
								"package": "@pronotron/pointer"
							}
						},
						{
							"id": 491,
							"name": "getState",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "model/ModelController.ts",
									"line": 53,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L53"
								}
							],
							"signatures": [
								{
									"id": 492,
									"name": "getState",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the current pointer state as a human-readable string,\r\ne.g. \"IDLE\", \"MOVING\"."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Current state name from "
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "PointerState",
														"target": {
															"packageName": "@pronotron/pointer",
															"packagePath": "src/core/PointerBase.ts",
															"qualifiedName": "PointerState"
														}
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "model/ModelController.ts",
											"line": 53,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L53"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ModelController.getState"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ModelController.getState"
							}
						},
						{
							"id": 493,
							"name": "startEvents",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "model/Touch.ts",
									"line": 34,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Touch.ts#L34"
								}
							],
							"signatures": [
								{
									"id": 494,
									"name": "startEvents",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Starts listening for touch events.\r\nMust be called before interaction can be tracked."
											}
										]
									},
									"sources": [
										{
											"fileName": "model/Touch.ts",
											"line": 34,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Touch.ts#L34"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 495,
							"name": "stopEvents",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "model/Touch.ts",
									"line": 49,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Touch.ts#L49"
								}
							],
							"signatures": [
								{
									"id": 496,
									"name": "stopEvents",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Stops and removes all registered touch event listeners.\r\nShould be called during cleanup or disposal."
											}
										]
									},
									"sources": [
										{
											"fileName": "model/Touch.ts",
											"line": 49,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Touch.ts#L49"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 497,
							"name": "updateSettings",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "model/ModelController.ts",
									"line": 30,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L30"
								}
							],
							"signatures": [
								{
									"id": 498,
									"name": "updateSettings",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Updates settings of the pointer controller"
											}
										]
									},
									"sources": [
										{
											"fileName": "model/ModelController.ts",
											"line": 30,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/ModelController.ts#L30"
										}
									],
									"parameters": [
										{
											"id": 499,
											"name": "settings",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "@pronotron/pointer",
															"packagePath": "src/core/PointerBase.ts",
															"qualifiedName": "BaseSettings"
														},
														"name": "BaseSettings",
														"package": "@pronotron/pointer"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "@pronotron/pointer",
															"packagePath": "src/core/PointerHoldable.ts",
															"qualifiedName": "HoldableSettings"
														},
														"name": "HoldableSettings",
														"package": "@pronotron/pointer"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ModelController.updateSettings",
										"package": "@pronotron/pointer"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ModelController.updateSettings",
								"package": "@pronotron/pointer"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								476
							]
						},
						{
							"title": "Methods",
							"children": [
								479,
								481,
								486,
								491,
								493,
								495,
								497
							]
						}
					],
					"sources": [
						{
							"fileName": "model/Touch.ts",
							"line": 19,
							"character": 13,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/model/Touch.ts#L19"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"packageName": "@pronotron/pointer",
								"packagePath": "src/core/model/ModelController.ts",
								"qualifiedName": "ModelController"
							},
							"name": "ModelController",
							"package": "@pronotron/pointer"
						}
					]
				},
				{
					"id": 500,
					"name": "PointerBaseDependencies",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"sources": [
						{
							"fileName": "PointerBase.ts",
							"line": 62,
							"character": 12,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/PointerBase.ts#L62"
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"target": {
									"packageName": "@pronotron/pointer",
									"packagePath": "src/core/PointerBase.ts",
									"qualifiedName": "BaseSettings"
								},
								"name": "BaseSettings",
								"package": "@pronotron/pointer"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 501,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 502,
											"name": "animator",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Central animation scheduler for idle timers."
													}
												]
											},
											"sources": [
												{
													"fileName": "PointerBase.ts",
													"line": 70,
													"character": 1,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/PointerBase.ts#L70"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@pronotron/utils",
													"packagePath": "dist/index.d.ts",
													"qualifiedName": "PronotronAnimator"
												},
												"name": "PronotronAnimator",
												"package": "@pronotron/utils"
											}
										},
										{
											"id": 503,
											"name": "clock",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Shared clock used to measure elapsed time for taps/holds."
													}
												]
											},
											"sources": [
												{
													"fileName": "PointerBase.ts",
													"line": 74,
													"character": 1,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/PointerBase.ts#L74"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@pronotron/utils",
													"packagePath": "dist/index.d.ts",
													"qualifiedName": "PronotronClock"
												},
												"name": "PronotronClock",
												"package": "@pronotron/utils"
											}
										},
										{
											"id": 504,
											"name": "isInteractable",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Should return true if the element under the pointer\r\nshould be considered “interactive” (e.g. buttons, links).\r\nMethod provided by user."
													}
												]
											},
											"sources": [
												{
													"fileName": "PointerBase.ts",
													"line": 82,
													"character": 1,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/PointerBase.ts#L82"
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 505,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "PointerBase.ts",
															"line": 82,
															"character": 17,
															"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/PointerBase.ts#L82"
														}
													],
													"signatures": [
														{
															"id": 506,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"parameters": [
																{
																	"id": 507,
																	"name": "target",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "Current event target"
																			}
																		]
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"packageName": "typescript",
																			"packagePath": "lib/lib.dom.d.ts",
																			"qualifiedName": "HTMLElement"
																		},
																		"name": "HTMLElement",
																		"package": "typescript"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													]
												}
											}
										},
										{
											"id": 508,
											"name": "target",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "DOM node or global object that pointer listeners attach to."
													}
												]
											},
											"sources": [
												{
													"fileName": "PointerBase.ts",
													"line": 66,
													"character": 1,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/PointerBase.ts#L66"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@pronotron/pointer",
													"packagePath": "src/core/PointerBase.ts",
													"qualifiedName": "PossibleTarget"
												},
												"name": "PossibleTarget",
												"package": "@pronotron/pointer"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												502,
												503,
												504,
												508
											]
										}
									],
									"sources": [
										{
											"fileName": "PointerBase.ts",
											"line": 62,
											"character": 53,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/PointerBase.ts#L62"
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 509,
					"name": "PointerHoldableDependencies",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"sources": [
						{
							"fileName": "PointerHoldable.ts",
							"line": 10,
							"character": 12,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/PointerHoldable.ts#L10"
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"target": 500,
								"name": "PointerBaseDependencies",
								"package": "@pronotron/pointer"
							},
							{
								"type": "reference",
								"target": {
									"packageName": "@pronotron/pointer",
									"packagePath": "src/core/PointerHoldable.ts",
									"qualifiedName": "HoldableSettings"
								},
								"name": "HoldableSettings",
								"package": "@pronotron/pointer"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 510,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 511,
											"name": "isHoldable",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "User-provided function to determine whether a DOM element supports hold interaction."
													}
												]
											},
											"sources": [
												{
													"fileName": "PointerHoldable.ts",
													"line": 15,
													"character": 1,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/PointerHoldable.ts#L15"
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 512,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "PointerHoldable.ts",
															"line": 15,
															"character": 13,
															"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/PointerHoldable.ts#L15"
														}
													],
													"signatures": [
														{
															"id": 513,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"parameters": [
																{
																	"id": 514,
																	"name": "target",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "HTMLElement that user trying to hold"
																			}
																		]
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"packageName": "typescript",
																			"packagePath": "lib/lib.dom.d.ts",
																			"qualifiedName": "HTMLElement"
																		},
																		"name": "HTMLElement",
																		"package": "typescript"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												511
											]
										}
									],
									"sources": [
										{
											"fileName": "PointerHoldable.ts",
											"line": 10,
											"character": 87,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-pointer/src/core/PointerHoldable.ts#L10"
										}
									]
								}
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						450,
						475
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						500,
						509
					]
				}
			],
			"readme": [
				{
					"kind": "text",
					"text": "# @pronotron/pointer\n\n[![NPM Package][npm]][npm-url]\n[![Build Size][build-size]][build-size-url]\n\nTracks mouse and touch pointers with custom states such as holding, tapping, idling, interacting, moving out, and moving in, providing enhanced interaction control.\n\n### Setup\n"
				},
				{
					"kind": "code",
					"text": "```typescript\nimport { MouseController, TouchController } from \"@pronotron/pointer\";\nimport { PronotronAnimator, PronotronClock, isTouchDevice } from \"@pronotron/utils\";\n\nconst clock = new PronotronClock();\nconst animator = new PronotronAnimator( clock );\n\n/**\n * Or create a touch controller if\n * isTouchDevice(); \n */\nconst pointerController = new MouseController({\n\ttarget: window.document.body,\n\tclock: clock,\n\tanimator: animator,\n\tidleThreshold: 0.5,\n\ttapThreshold: 0.25,\n\tholdThreshold: 0.75,\n\tmovingDeltaLimit: 10,\n\tisInteractable: ( target: HTMLElement ) => {\n\t\treturn target.classList.contains( \"holdable\" ) || target.tagName === \"A\";\n\t},\n\tisHoldable: ( target: HTMLElement ) => {\n\t\treturn target.dataset.holdable ? true : false;\n\t}\n});\n\nconst holdHandler = ( event: CustomEvent ) => {\n\tconsole.log( \"HOLD\", event )\n};\nconst holdendHandler = ( event: CustomEvent ) => {\n\tconsole.log( \"HOLD-END\", event )\n};\nconst tapHandler = ( event: CustomEvent ) => {\n\tconsole.log( \"TAP\", event )\n};\n\nwindow.document.body.addEventListener( \"hold\", holdHandler as EventListener );\nwindow.document.body.addEventListener( \"holdend\", holdendHandler as EventListener );\nwindow.document.body.addEventListener( \"tap\", tapHandler as EventListener );\n```"
				},
				{
					"kind": "text",
					"text": "\n\n### Usage\n\n"
				},
				{
					"kind": "code",
					"text": "```typescript\npointerController.startEvents();\n\nlet animationFrameId = 0;\n\nfunction tick()\n{\n\tconst deltaTime = clock.tick();\n\tanimator.tick();\n\n\tconst pointerPosition = pointerController.getPosition();\n\tconst pointerDelta = pointerController.getDelta();\n\tconst pointerState = pointerController.getState();\n\tconst isPointerTargetInteractable = pointerController.getTargetInteractable();    \n\n\tanimationFrameId = requestAnimationFrame( tick );\n};\n\nanimationFrameId = requestAnimationFrame( tick );\n\n// Dispose\n// pointerController.stopEvents();\n```"
				},
				{
					"kind": "text",
					"text": "\n\n[npm]: https://img.shields.io/npm/v/@pronotron/pointer\n[npm-url]: https://www.npmjs.com/package/@pronotron/pointer\n[build-size]: https://badgen.net/bundlephobia/minzip/@pronotron/pointer\n[build-size-url]: https://bundlephobia.com/result?p=@pronotron/pointer"
				}
			]
		},
		{
			"id": 351,
			"name": "@pronotron/utils",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 352,
					"name": "IDPool",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "IDPool\r\n\r\nManages a pool of unique numeric IDs, providing efficient allocation and release of IDs using an internal bit array.\r\nSupports automatic capacity expansion when all IDs are in use."
							}
						]
					},
					"children": [
						{
							"id": 353,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "utils/IDPool.ts",
									"line": 23,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/IDPool.ts#L23"
								}
							],
							"signatures": [
								{
									"id": 354,
									"name": "IDPool",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Initializes the IDPool with a given initial capacity."
											}
										]
									},
									"sources": [
										{
											"fileName": "utils/IDPool.ts",
											"line": 23,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/IDPool.ts#L23"
										}
									],
									"parameters": [
										{
											"id": 355,
											"name": "capacityHint",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Initial number of IDs available; the pool will expand dynamically if needed."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 352,
										"name": "IDPool",
										"package": "@pronotron/utils"
									}
								}
							]
						},
						{
							"id": 356,
							"name": "consume",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "utils/IDPool.ts",
									"line": 58,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/IDPool.ts#L58"
								}
							],
							"signatures": [
								{
									"id": 357,
									"name": "consume",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Marks a specific ID as used in the pool."
											}
										]
									},
									"sources": [
										{
											"fileName": "utils/IDPool.ts",
											"line": 58,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/IDPool.ts#L58"
										}
									],
									"parameters": [
										{
											"id": 358,
											"name": "ID",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Numeric ID to mark as consumed."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 359,
							"name": "get",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "utils/IDPool.ts",
									"line": 37,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/IDPool.ts#L37"
								}
							],
							"signatures": [
								{
									"id": 360,
									"name": "get",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the first available numeric ID from the pool. \r\nIf all IDs are used, the pool automatically expands and returns the next available ID.\r\n\r\n***Returned ID must be used with IDPool.consume( ID )***"
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The available ID as a number."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "utils/IDPool.ts",
											"line": 37,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/IDPool.ts#L37"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						},
						{
							"id": 361,
							"name": "release",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "utils/IDPool.ts",
									"line": 68,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/IDPool.ts#L68"
								}
							],
							"signatures": [
								{
									"id": 362,
									"name": "release",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Releases a previously consumed ID, making it available for future allocation."
											}
										]
									},
									"sources": [
										{
											"fileName": "utils/IDPool.ts",
											"line": 68,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/IDPool.ts#L68"
										}
									],
									"parameters": [
										{
											"id": 363,
											"name": "ID",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Numeric ID to release."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								353
							]
						},
						{
							"title": "Methods",
							"children": [
								356,
								359,
								361
							]
						}
					],
					"sources": [
						{
							"fileName": "utils/IDPool.ts",
							"line": 7,
							"character": 13,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/IDPool.ts#L7"
						}
					]
				},
				{
					"id": 364,
					"name": "NativeControlTable",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "NativeControlTable class manages a fixed-size native array (as a control table) with an inferred numeric Enum structure. \r\nIt uses a high-frequency access pattern, ideal for animation or real-time applications where \r\ndirect memory access is critical for performance."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```typescript\r\nenum AnimationData {\r\n\tDELAY,\r\n\tDURATION,\r\n\t...\r\n};\r\n// Any typed array can be used depends on your data\r\nconst controlTable: NativeControlTable<AnimationData> = new NativeControlTable( 2, Float32Array, nodeCountHint );\r\ncontrolTable.add( YOUR_ANIMATION_ID, {\r\n\t[ AnimationData.DELAY ]: 0.15,\r\n\t[ AnimationData.DURATION ]: 1.75\r\n} );\r\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```typescript\r\n// Iterating over the control table,\r\nconst { table, usedSlots, stride } = controlTable;\r\nfor ( i = 0; i < usedSlots; i++ ){\r\n\tconst slotOffset = i * stride;\r\n\tconst delay = table[ slotOffset + AnimationData.DELAY ];\r\n\tconst duration = table[ slotOffset + AnimationData.DURATION ];\r\n}\r\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 365,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "native-control-table/NativeControlTable.ts",
									"line": 86,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L86"
								}
							],
							"signatures": [
								{
									"id": 366,
									"name": "NativeControlTable",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Initializes a fixed-size native control table with a specified stride and underlying typed array."
											}
										]
									},
									"sources": [
										{
											"fileName": "native-control-table/NativeControlTable.ts",
											"line": 86,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L86"
										}
									],
									"typeParameters": [
										{
											"id": 367,
											"name": "EnumType",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"parameters": [
										{
											"id": 368,
											"name": "stride",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Determines the stride size"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 369,
											"name": "tableType",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Typed array version"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 370,
													"name": "__type",
													"variant": "declaration",
													"kind": 512,
													"flags": {},
													"sources": [
														{
															"fileName": "native-control-table/NativeControlTable.ts",
															"line": 86,
															"character": 41,
															"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L86"
														}
													],
													"signatures": [
														{
															"id": 371,
															"name": "tableType",
															"variant": "signature",
															"kind": 16384,
															"flags": {},
															"sources": [
																{
																	"fileName": "native-control-table/NativeControlTable.ts",
																	"line": 86,
																	"character": 43,
																	"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L86"
																}
															],
															"parameters": [
																{
																	"id": 372,
																	"name": "length",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"packageName": "@pronotron/utils",
																	"packagePath": "src/native-control-table/NativeControlTable.ts",
																	"qualifiedName": "NativeTable"
																},
																"name": "NativeTable",
																"package": "@pronotron/utils"
															}
														}
													]
												}
											}
										},
										{
											"id": 373,
											"name": "nodeCountHint",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Used to initialize the fixed-size native array, capacity will expand if needed."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 364,
										"typeArguments": [
											{
												"type": "reference",
												"target": 367,
												"name": "EnumType",
												"package": "@pronotron/utils",
												"qualifiedName": "NativeControlTable.EnumType",
												"refersToTypeParameter": true
											}
										],
										"name": "NativeControlTable",
										"package": "@pronotron/utils"
									}
								}
							]
						},
						{
							"id": 374,
							"name": "stride",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Defines how many elements each node holds."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n4: [ ( +, +, +, + ), ( +, +, +, + ), ... ]\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "native-control-table/NativeControlTable.ts",
									"line": 52,
									"character": 8,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L52"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 375,
							"name": "table",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Raw typed array that holds flattened data"
									}
								]
							},
							"sources": [
								{
									"fileName": "native-control-table/NativeControlTable.ts",
									"line": 45,
									"character": 8,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L45"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@pronotron/utils",
									"packagePath": "src/native-control-table/NativeControlTable.ts",
									"qualifiedName": "NativeTable"
								},
								"name": "NativeTable",
								"package": "@pronotron/utils"
							}
						},
						{
							"id": 376,
							"name": "usedSlots",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The control table is created with a fixed size.\r\nThis property tracks how many slots are currently used."
									}
								]
							},
							"sources": [
								{
									"fileName": "native-control-table/NativeControlTable.ts",
									"line": 58,
									"character": 8,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L58"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 377,
							"name": "add",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "native-control-table/NativeControlTable.ts",
									"line": 105,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L105"
								}
							],
							"signatures": [
								{
									"id": 378,
									"name": "add",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a new slot to the table with the provided ID and full node data."
											}
										]
									},
									"sources": [
										{
											"fileName": "native-control-table/NativeControlTable.ts",
											"line": 105,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L105"
										}
									],
									"parameters": [
										{
											"id": 379,
											"name": "ID",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Unique identifier for the slot."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@pronotron/utils",
													"packagePath": "src/native-control-table/NativeControlTable.ts",
													"qualifiedName": "SlotID"
												},
												"name": "SlotID",
												"package": "@pronotron/utils"
											}
										},
										{
											"id": 380,
											"name": "fullData",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Object containing a value for every enum key."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 435,
												"typeArguments": [
													{
														"type": "reference",
														"target": 367,
														"name": "EnumType",
														"package": "@pronotron/utils",
														"qualifiedName": "NativeControlTable.EnumType",
														"refersToTypeParameter": true
													}
												],
												"name": "EnumValueMap",
												"package": "@pronotron/utils"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 381,
							"name": "getData",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "native-control-table/NativeControlTable.ts",
									"line": 178,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L178"
								}
							],
							"signatures": [
								{
									"id": 382,
									"name": "getData",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Retrieves a specific value from a slot by its ID and enum key."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The numeric value stored for that key in the slot, or undefined if the ID does not exist."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "native-control-table/NativeControlTable.ts",
											"line": 178,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L178"
										}
									],
									"parameters": [
										{
											"id": 383,
											"name": "ID",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Slot ID to get"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@pronotron/utils",
													"packagePath": "src/native-control-table/NativeControlTable.ts",
													"qualifiedName": "SlotID"
												},
												"name": "SlotID",
												"package": "@pronotron/utils"
											}
										},
										{
											"id": 384,
											"name": "dataKey",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Enum key corresponding to the desired value."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 367,
												"name": "EnumType",
												"package": "@pronotron/utils",
												"qualifiedName": "NativeControlTable.EnumType",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Error"
												},
												"name": "Error",
												"package": "typescript"
											}
										]
									}
								}
							]
						},
						{
							"id": 385,
							"name": "isExist",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "native-control-table/NativeControlTable.ts",
									"line": 222,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L222"
								}
							],
							"signatures": [
								{
									"id": 386,
									"name": "isExist",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Checks whether a slot with the given ID currently exists in the table."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "true if the slot exists; otherwise false."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "native-control-table/NativeControlTable.ts",
											"line": 222,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L222"
										}
									],
									"parameters": [
										{
											"id": 387,
											"name": "ID",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Slot ID."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@pronotron/utils",
													"packagePath": "src/native-control-table/NativeControlTable.ts",
													"qualifiedName": "SlotID"
												},
												"name": "SlotID",
												"package": "@pronotron/utils"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						},
						{
							"id": 388,
							"name": "modifyByID",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "native-control-table/NativeControlTable.ts",
									"line": 193,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L193"
								}
							],
							"signatures": [
								{
									"id": 389,
									"name": "modifyByID",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Modifies an existing slot identified by its ID with partial or complete data."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": []
											}
										]
									},
									"sources": [
										{
											"fileName": "native-control-table/NativeControlTable.ts",
											"line": 193,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L193"
										}
									],
									"parameters": [
										{
											"id": 390,
											"name": "ID",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Slot ID to modify."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@pronotron/utils",
													"packagePath": "src/native-control-table/NativeControlTable.ts",
													"qualifiedName": "SlotID"
												},
												"name": "SlotID",
												"package": "@pronotron/utils"
											}
										},
										{
											"id": 391,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Object with at least one property defined"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 441,
												"typeArguments": [
													{
														"type": "reference",
														"target": 435,
														"typeArguments": [
															{
																"type": "reference",
																"target": 367,
																"name": "EnumType",
																"package": "@pronotron/utils",
																"qualifiedName": "NativeControlTable.EnumType",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumValueMap",
														"package": "@pronotron/utils"
													}
												],
												"name": "RequireAtLeastOne",
												"package": "@pronotron/utils"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Error"
												},
												"name": "Error",
												"package": "typescript"
											}
										]
									}
								}
							]
						},
						{
							"id": 392,
							"name": "modifyByPosition",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "native-control-table/NativeControlTable.ts",
									"line": 206,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L206"
								}
							],
							"signatures": [
								{
									"id": 393,
									"name": "modifyByPosition",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Updates a slot’s data when its table index (position) is already known.\r\nUseful for internal iteration or when the ID-to-position mapping is already available."
											}
										]
									},
									"sources": [
										{
											"fileName": "native-control-table/NativeControlTable.ts",
											"line": 206,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L206"
										}
									],
									"parameters": [
										{
											"id": 394,
											"name": "position",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Index of the slot in the table."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 395,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Partial or full node data."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 441,
												"typeArguments": [
													{
														"type": "reference",
														"target": 435,
														"typeArguments": [
															{
																"type": "reference",
																"target": 367,
																"name": "EnumType",
																"package": "@pronotron/utils",
																"qualifiedName": "NativeControlTable.EnumType",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumValueMap",
														"package": "@pronotron/utils"
													}
												],
												"name": "RequireAtLeastOne",
												"package": "@pronotron/utils"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 396,
							"name": "remove",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "native-control-table/NativeControlTable.ts",
									"line": 129,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L129"
								}
							],
							"signatures": [
								{
									"id": 397,
									"name": "remove",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes the slot with the given ID from the table."
											}
										]
									},
									"sources": [
										{
											"fileName": "native-control-table/NativeControlTable.ts",
											"line": 129,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L129"
										}
									],
									"parameters": [
										{
											"id": 398,
											"name": "ID",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Slot ID to remove."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@pronotron/utils",
													"packagePath": "src/native-control-table/NativeControlTable.ts",
													"qualifiedName": "SlotID"
												},
												"name": "SlotID",
												"package": "@pronotron/utils"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Error"
												},
												"name": "Error",
												"package": "typescript"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								365
							]
						},
						{
							"title": "Properties",
							"children": [
								374,
								375,
								376
							]
						},
						{
							"title": "Methods",
							"children": [
								377,
								381,
								385,
								388,
								392,
								396
							]
						}
					],
					"sources": [
						{
							"fileName": "native-control-table/NativeControlTable.ts",
							"line": 40,
							"character": 13,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/native-control-table/NativeControlTable.ts#L40"
						}
					],
					"typeParameters": [
						{
							"id": 399,
							"name": "EnumType",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 400,
					"name": "PronotronAnimator",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "PronotronAnimator - Controls scheduling, updating, and lifecycle management of animations."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\r\nconst clock = new PronotronClock();\r\nconst animator = new PronotronAnimator( clock, 50 );\r\nanimator.add({\r\n\tid: `unique_animation_id`,\r\n\tduration: 3.0, // in seconds\r\n\tdelay: 0.5, // in seconds\r\n\tautoPause: true, // Animation pauses when screen is unfocused\r\n\tonBegin: ( currentTime, startTime, duration ) => {\r\n\t\tconsole.log( \"Animation begin\" );\r\n\t},\r\n\tonRender: ( currentTime, startTime, duration ) => {\r\n\t\tconst timeline = ( currentTime - startTime ) / duration;\r\n\t\tconsole.log( Math.min( timeline, 1.0 ) );\r\n\t},\r\n\tonEnd: ( forced ) => {\r\n\t\tif ( ! forced ){\r\n\t\t\tconsole.log( \"Animation finished naturally\" );\r\n\t\t} \r\n\t}\r\n});\r\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 401,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "animator/PronotronAnimator.ts",
									"line": 169,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L169"
								}
							],
							"signatures": [
								{
									"id": 402,
									"name": "PronotronAnimator",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "animator/PronotronAnimator.ts",
											"line": 169,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L169"
										}
									],
									"parameters": [
										{
											"id": 403,
											"name": "clock",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The global clock used for animation timing."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 414,
												"name": "PronotronClock",
												"package": "@pronotron/utils"
											}
										},
										{
											"id": 404,
											"name": "nodeCountHint",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Max expected animation object at the same time, will be auto expand if needed"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "20"
										}
									],
									"type": {
										"type": "reference",
										"target": 400,
										"name": "PronotronAnimator",
										"package": "@pronotron/utils"
									}
								}
							]
						},
						{
							"id": 405,
							"name": "add",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "animator/PronotronAnimator.ts",
									"line": 183,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L183"
								}
							],
							"signatures": [
								{
									"id": 406,
									"name": "add",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds an animation to the controller.\r\nIf another animation with the same ID exists, it is removed first."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The registered animation option reference."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "animator/PronotronAnimator.ts",
											"line": 183,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L183"
										}
									],
									"parameters": [
										{
											"id": 407,
											"name": "animationOption",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Animation configuration."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 428,
												"name": "AnimationOption",
												"package": "@pronotron/utils"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 408,
							"name": "remove",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "animator/PronotronAnimator.ts",
									"line": 219,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L219"
								}
							],
							"signatures": [
								{
									"id": 409,
									"name": "remove",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes an animation by its external ID."
											}
										]
									},
									"sources": [
										{
											"fileName": "animator/PronotronAnimator.ts",
											"line": 219,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L219"
										}
									],
									"parameters": [
										{
											"id": 410,
											"name": "animationID",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The ID used when adding the animation."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 411,
											"name": "forced",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "If true, calls onEnd(forced = true) before removal."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 412,
							"name": "tick",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "animator/PronotronAnimator.ts",
									"line": 239,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L239"
								}
							],
							"signatures": [
								{
									"id": 413,
									"name": "tick",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Updates all active animations.\r\nShould be called once per frame."
											}
										]
									},
									"sources": [
										{
											"fileName": "animator/PronotronAnimator.ts",
											"line": 239,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L239"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								401
							]
						},
						{
							"title": "Methods",
							"children": [
								405,
								408,
								412
							]
						}
					],
					"sources": [
						{
							"fileName": "animator/PronotronAnimator.ts",
							"line": 133,
							"character": 13,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L133"
						}
					]
				},
				{
					"id": 414,
					"name": "PronotronClock",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "PronotronClock\r\n\r\nA dual-domain clock that tracks both:\r\n\r\n- **Global time** — always progresses (unaffected by tab focus)\r\n- **Active time** — pauses when the screen/tab is unfocused\r\n\r\nThis allows animations or logic to selectively follow either time domain."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\r\nconst clock = new PronotronClock();\r\nconst handleVisibilityChange = () => {\r\n\tif ( document.hidden ){\r\n\t\tclock.pause();\r\n\t} else {\r\n\t\tclock.resume();\r\n\t}\r\n};\r\ndocument.addEventListener( 'visibilitychange', handleVisibilityChange );\r\n\r\n// In your main loop:\r\nfunction frame()\r\n{\r\n\tconst delta = clock.tick();\r\n\tconst { elapsedTime, elapsedPausedTime } = clock.getTime();\r\n\t// ...rest\r\n}\r\nframe();\r\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 415,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"signatures": [
								{
									"id": 416,
									"name": "PronotronClock",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 414,
										"name": "PronotronClock",
										"package": "@pronotron/utils"
									}
								}
							]
						},
						{
							"id": 417,
							"name": "getTime",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "clock/PronotronClock.ts",
									"line": 110,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/clock/PronotronClock.ts#L110"
								}
							],
							"signatures": [
								{
									"id": 418,
									"name": "getTime",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the current time states for both global and active timelines."
											}
										]
									},
									"sources": [
										{
											"fileName": "clock/PronotronClock.ts",
											"line": 110,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/clock/PronotronClock.ts#L110"
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 419,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 420,
													"name": "elapsedPausedTime",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "clock/PronotronClock.ts",
															"line": 110,
															"character": 35,
															"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/clock/PronotronClock.ts#L110"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 421,
													"name": "elapsedTime",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "clock/PronotronClock.ts",
															"line": 110,
															"character": 14,
															"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/clock/PronotronClock.ts#L110"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														420,
														421
													]
												}
											],
											"sources": [
												{
													"fileName": "clock/PronotronClock.ts",
													"line": 110,
													"character": 12,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/clock/PronotronClock.ts#L110"
												}
											]
										}
									}
								}
							]
						},
						{
							"id": 422,
							"name": "pause",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "clock/PronotronClock.ts",
									"line": 93,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/clock/PronotronClock.ts#L93"
								}
							],
							"signatures": [
								{
									"id": 423,
									"name": "pause",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Pauses the \"active\" time domain without affecting global time.\r\nCall when the window or app loses focus."
											}
										]
									},
									"sources": [
										{
											"fileName": "clock/PronotronClock.ts",
											"line": 93,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/clock/PronotronClock.ts#L93"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 424,
							"name": "resume",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "clock/PronotronClock.ts",
									"line": 102,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/clock/PronotronClock.ts#L102"
								}
							],
							"signatures": [
								{
									"id": 425,
									"name": "resume",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Resumes the \"active\" time domain.\r\nAdjusts for time spent paused so that active time remains continuous."
											}
										]
									},
									"sources": [
										{
											"fileName": "clock/PronotronClock.ts",
											"line": 102,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/clock/PronotronClock.ts#L102"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 426,
							"name": "tick",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "clock/PronotronClock.ts",
									"line": 83,
									"character": 1,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/clock/PronotronClock.ts#L83"
								}
							],
							"signatures": [
								{
									"id": 427,
									"name": "tick",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Advances the clock by one frame and computes the delta time.\r\nCall this once per render frame"
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The time elapsed since the previous tick (delta time), in seconds."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "clock/PronotronClock.ts",
											"line": 83,
											"character": 1,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/clock/PronotronClock.ts#L83"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								415
							]
						},
						{
							"title": "Methods",
							"children": [
								417,
								422,
								424,
								426
							]
						}
					],
					"sources": [
						{
							"fileName": "clock/PronotronClock.ts",
							"line": 33,
							"character": 13,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/clock/PronotronClock.ts#L33"
						}
					]
				},
				{
					"id": 428,
					"name": "AnimationOption",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Describes the configuration of an animation instance."
							}
						]
					},
					"sources": [
						{
							"fileName": "animator/PronotronAnimator.ts",
							"line": 67,
							"character": 12,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L67"
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"target": 441,
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"packageName": "@pronotron/utils",
											"packagePath": "src/animator/PronotronAnimator.ts",
											"qualifiedName": "CallbackOption"
										},
										"name": "CallbackOption",
										"package": "@pronotron/utils"
									}
								],
								"name": "RequireAtLeastOne",
								"package": "@pronotron/utils"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 429,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 430,
											"name": "autoPause",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Whether the animation should pause when screen is unfocused.\r\ntrue → pauses when unfocused\r\nfalse → continues ticking"
													}
												]
											},
											"sources": [
												{
													"fileName": "animator/PronotronAnimator.ts",
													"line": 78,
													"character": 1,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L78"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 431,
											"name": "delay",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Optional delay before animation start, in seconds."
													}
												]
											},
											"sources": [
												{
													"fileName": "animator/PronotronAnimator.ts",
													"line": 86,
													"character": 1,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L86"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 432,
											"name": "duration",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Animation duration in seconds."
													}
												]
											},
											"sources": [
												{
													"fileName": "animator/PronotronAnimator.ts",
													"line": 82,
													"character": 1,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L82"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 433,
											"name": "id",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Unique client-provided identifier.\r\nAdding an animation with the same ID forcibly finishes the previous one."
													}
												]
											},
											"sources": [
												{
													"fileName": "animator/PronotronAnimator.ts",
													"line": 72,
													"character": 1,
													"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L72"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@pronotron/utils",
													"packagePath": "src/animator/PronotronAnimator.ts",
													"qualifiedName": "AnimationClientID"
												},
												"name": "AnimationClientID",
												"package": "@pronotron/utils"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												430,
												431,
												432,
												433
											]
										}
									],
									"sources": [
										{
											"fileName": "animator/PronotronAnimator.ts",
											"line": 67,
											"character": 66,
											"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/animator/PronotronAnimator.ts#L67"
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 434,
					"name": "BinaryBoolean",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"sources": [
						{
							"fileName": "utils/Types.ts",
							"line": 38,
							"character": 12,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/Types.ts#L38"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 0
							}
						]
					}
				},
				{
					"id": 435,
					"name": "EnumValueMap",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Maps each member of a numeric enum "
							},
							{
								"kind": "code",
								"text": "`E`"
							},
							{
								"kind": "text",
								"text": " to a "
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": " value."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\r\nenum Status { \r\n\tIdle = 0, \r\n\tRunning = 1, \r\n\tDone = 2 \r\n}\r\nconst statusDurations: EnumValueMap<Status> = {\r\n  [Status.Idle]: 100,\r\n  [Status.Running]: 500,\r\n  [Status.Done]: 0,\r\n};\r\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "utils/Types.ts",
							"line": 34,
							"character": 12,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/Types.ts#L34"
						}
					],
					"typeParameters": [
						{
							"id": 436,
							"name": "E",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "mapped",
						"parameter": "Member",
						"parameterType": {
							"type": "reference",
							"target": 436,
							"name": "E",
							"package": "@pronotron/utils",
							"refersToTypeParameter": true
						},
						"templateType": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				},
				{
					"id": 437,
					"name": "KeysOfUnion",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extracts all unique keys from every member of a union type.\r\n\r\nExample:\r\n  type U = { a: number } | { b: string };\r\n  KeysOfUnion<U> → \"a\" | \"b\""
							}
						]
					},
					"sources": [
						{
							"fileName": "utils/Types.ts",
							"line": 47,
							"character": 12,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/Types.ts#L47"
						}
					],
					"typeParameters": [
						{
							"id": 438,
							"name": "U",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"target": 438,
							"name": "U",
							"package": "@pronotron/utils",
							"refersToTypeParameter": true
						},
						"extendsType": {
							"type": "intrinsic",
							"name": "any"
						},
						"trueType": {
							"type": "typeOperator",
							"operator": "keyof",
							"target": {
								"type": "reference",
								"target": 438,
								"name": "U",
								"package": "@pronotron/utils",
								"refersToTypeParameter": true
							}
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 439,
					"name": "MergedProps",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Merges all properties from a union of object types into one\r\n“combined shape” type, preserving each property’s possible types.\r\n\r\nExample:\r\n  type U = { a: number } | { b: string };\r\n  MergedProps<U> → { a: number; b: string }"
							}
						]
					},
					"sources": [
						{
							"fileName": "utils/Types.ts",
							"line": 57,
							"character": 12,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/Types.ts#L57"
						}
					],
					"typeParameters": [
						{
							"id": 440,
							"name": "U",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"type": {
						"type": "mapped",
						"parameter": "K",
						"parameterType": {
							"type": "reference",
							"target": 437,
							"typeArguments": [
								{
									"type": "reference",
									"target": 440,
									"name": "U",
									"package": "@pronotron/utils",
									"refersToTypeParameter": true
								}
							],
							"name": "KeysOfUnion",
							"package": "@pronotron/utils"
						},
						"templateType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"target": {
									"packageName": "typescript",
									"packagePath": "lib/lib.es5.d.ts",
									"qualifiedName": "Extract"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 440,
										"name": "U",
										"package": "@pronotron/utils",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "@pronotron/utils",
													"packagePath": "src/utils/Types.ts",
													"qualifiedName": "K"
												},
												"name": "K",
												"package": "@pronotron/utils",
												"refersToTypeParameter": true
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								],
								"name": "Extract",
								"package": "typescript"
							},
							"extendsType": {
								"type": "reference",
								"target": {
									"packageName": "typescript",
									"packagePath": "lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"packageName": "@pronotron/utils",
											"packagePath": "src/utils/Types.ts",
											"qualifiedName": "K"
										},
										"name": "K",
										"package": "@pronotron/utils",
										"refersToTypeParameter": true
									},
									{
										"type": "inferred",
										"name": "P"
									}
								],
								"name": "Record",
								"package": "typescript"
							},
							"trueType": {
								"type": "reference",
								"target": {
									"packageName": "@pronotron/utils",
									"packagePath": "src/utils/Types.ts",
									"qualifiedName": "P"
								},
								"name": "P",
								"package": "@pronotron/utils",
								"refersToTypeParameter": true
							},
							"falseType": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					}
				},
				{
					"id": 441,
					"name": "RequireAtLeastOne",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Ensures that an object of type T has "
							},
							{
								"kind": "code",
								"text": "`at least one property`"
							},
							{
								"kind": "text",
								"text": " defined.\r\nAll other properties remain optional."
							}
						]
					},
					"sources": [
						{
							"fileName": "utils/Types.ts",
							"line": 5,
							"character": 12,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/Types.ts#L5"
						}
					],
					"typeParameters": [
						{
							"id": 442,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"type": {
						"type": "indexedAccess",
						"indexType": {
							"type": "typeOperator",
							"operator": "keyof",
							"target": {
								"type": "reference",
								"target": 442,
								"name": "T",
								"package": "@pronotron/utils",
								"refersToTypeParameter": true
							}
						},
						"objectType": {
							"type": "mapped",
							"parameter": "K",
							"parameterType": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"target": 442,
									"name": "T",
									"package": "@pronotron/utils",
									"refersToTypeParameter": true
								}
							},
							"templateType": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Pick"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 442,
												"name": "T",
												"package": "@pronotron/utils",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": {
													"packageName": "@pronotron/utils",
													"packagePath": "src/utils/Types.ts",
													"qualifiedName": "K"
												},
												"name": "K",
												"package": "@pronotron/utils",
												"refersToTypeParameter": true
											}
										],
										"name": "Pick",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Partial"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 442,
												"name": "T",
												"package": "@pronotron/utils",
												"refersToTypeParameter": true
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								]
							}
						}
					}
				},
				{
					"id": 443,
					"name": "RequireAtLeastOneFromUnion",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a type that enforces **at least one** member of a union "
							},
							{
								"kind": "code",
								"text": "`U`"
							},
							{
								"kind": "text",
								"text": "\r\nto be present, while keeping the other possible properties optional.\r\n\r\nEach variant in the resulting type corresponds to one union member\r\nwhose keys are required, while the remaining members’ keys are optional\r\nbut still properly typed.\r\n\r\nExample:\r\n  type U = { a: number } | { b: string };\r\n  RequireAtLeastOneFromUnion<U> → \r\n    | { a: number; b?: string }\r\n    | { b: string; a?: number }"
							}
						]
					},
					"sources": [
						{
							"fileName": "utils/Types.ts",
							"line": 75,
							"character": 12,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/Types.ts#L75"
						}
					],
					"typeParameters": [
						{
							"id": 444,
							"name": "U",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"target": 444,
							"name": "U",
							"package": "@pronotron/utils",
							"refersToTypeParameter": true
						},
						"extendsType": {
							"type": "intrinsic",
							"name": "any"
						},
						"trueType": {
							"type": "intersection",
							"types": [
								{
									"type": "reference",
									"target": 444,
									"name": "U",
									"package": "@pronotron/utils",
									"refersToTypeParameter": true
								},
								{
									"type": "reference",
									"target": {
										"packageName": "typescript",
										"packagePath": "lib/lib.es5.d.ts",
										"qualifiedName": "Partial"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"packageName": "typescript",
												"packagePath": "lib/lib.es5.d.ts",
												"qualifiedName": "Pick"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 439,
													"typeArguments": [
														{
															"type": "reference",
															"target": 444,
															"name": "U",
															"package": "@pronotron/utils",
															"refersToTypeParameter": true
														}
													],
													"name": "MergedProps",
													"package": "@pronotron/utils"
												},
												{
													"type": "reference",
													"target": {
														"packageName": "typescript",
														"packagePath": "lib/lib.es5.d.ts",
														"qualifiedName": "Exclude"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": 437,
															"typeArguments": [
																{
																	"type": "reference",
																	"target": 444,
																	"name": "U",
																	"package": "@pronotron/utils",
																	"refersToTypeParameter": true
																}
															],
															"name": "KeysOfUnion",
															"package": "@pronotron/utils"
														},
														{
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "reference",
																"target": 444,
																"name": "U",
																"package": "@pronotron/utils",
																"refersToTypeParameter": true
															}
														}
													],
													"name": "Exclude",
													"package": "typescript"
												}
											],
											"name": "Pick",
											"package": "typescript"
										}
									],
									"name": "Partial",
									"package": "typescript"
								}
							]
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 445,
					"name": "RequireExactlyOne",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Ensures that an object of type T has "
							},
							{
								"kind": "code",
								"text": "`exactly one property`"
							},
							{
								"kind": "text",
								"text": " defined.\r\nAll other properties are disallowed (cannot exist)."
							}
						]
					},
					"sources": [
						{
							"fileName": "utils/Types.ts",
							"line": 13,
							"character": 12,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/Types.ts#L13"
						}
					],
					"typeParameters": [
						{
							"id": 446,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"type": {
						"type": "indexedAccess",
						"indexType": {
							"type": "typeOperator",
							"operator": "keyof",
							"target": {
								"type": "reference",
								"target": 446,
								"name": "T",
								"package": "@pronotron/utils",
								"refersToTypeParameter": true
							}
						},
						"objectType": {
							"type": "mapped",
							"parameter": "K",
							"parameterType": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"target": 446,
									"name": "T",
									"package": "@pronotron/utils",
									"refersToTypeParameter": true
								}
							},
							"templateType": {
								"type": "intersection",
								"types": [
									{
										"type": "mapped",
										"parameter": "P",
										"parameterType": {
											"type": "reference",
											"target": {
												"packageName": "@pronotron/utils",
												"packagePath": "src/utils/Types.ts",
												"qualifiedName": "K"
											},
											"name": "K",
											"package": "@pronotron/utils",
											"refersToTypeParameter": true
										},
										"templateType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"target": {
													"packageName": "@pronotron/utils",
													"packagePath": "src/utils/Types.ts",
													"qualifiedName": "P"
												},
												"name": "P",
												"package": "@pronotron/utils",
												"refersToTypeParameter": true
											},
											"objectType": {
												"type": "reference",
												"target": 446,
												"name": "T",
												"package": "@pronotron/utils",
												"refersToTypeParameter": true
											}
										}
									},
									{
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Partial"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "typescript",
															"packagePath": "lib/lib.es5.d.ts",
															"qualifiedName": "Exclude"
														},
														"typeArguments": [
															{
																"type": "typeOperator",
																"operator": "keyof",
																"target": {
																	"type": "reference",
																	"target": 446,
																	"name": "T",
																	"package": "@pronotron/utils",
																	"refersToTypeParameter": true
																}
															},
															{
																"type": "reference",
																"target": {
																	"packageName": "@pronotron/utils",
																	"packagePath": "src/utils/Types.ts",
																	"qualifiedName": "K"
																},
																"name": "K",
																"package": "@pronotron/utils",
																"refersToTypeParameter": true
															}
														],
														"name": "Exclude",
														"package": "typescript"
													},
													{
														"type": "intrinsic",
														"name": "never"
													}
												],
												"name": "Record",
												"package": "typescript"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								]
							}
						}
					}
				},
				{
					"id": 447,
					"name": "isTouchDevice",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "utils/isTouchDevice.ts",
							"line": 5,
							"character": 16,
							"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/isTouchDevice.ts#L5"
						}
					],
					"signatures": [
						{
							"id": 448,
							"name": "isTouchDevice",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Touch screen detection"
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/isTouchDevice.ts",
									"line": 5,
									"character": 16,
									"url": "https://github.com/yunusbayraktaroglu/pronotron-tech-art-suite/blob/2b5845bf4af199383a399bf4d39a2d7d05eda736/packages/pronotron-utils/src/utils/isTouchDevice.ts#L5"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						352,
						364,
						400,
						414
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						428,
						434,
						435,
						437,
						439,
						441,
						443,
						445
					]
				},
				{
					"title": "Functions",
					"children": [
						447
					]
				}
			],
			"readme": [
				{
					"kind": "text",
					"text": "# @pronotron/utils\n\n[![NPM Package][npm]][npm-url]\n[![Build Size][build-size]][build-size-url]\n\nA set of helper modules used by other @pronotron packages, which can also be used individually.\n\n- "
				},
				{
					"kind": "code",
					"text": "`Animator`"
				},
				{
					"kind": "text",
					"text": ": Built on "
				},
				{
					"kind": "code",
					"text": "`NativeControlTable`"
				},
				{
					"kind": "text",
					"text": " and "
				},
				{
					"kind": "code",
					"text": "`Clock`"
				},
				{
					"kind": "text",
					"text": ", provides a lightweight yet powerful system for managing large-scale animations with high efficiency.\n- "
				},
				{
					"kind": "code",
					"text": "`NativeControlTable`"
				},
				{
					"kind": "text",
					"text": ": Utilizes [TypedArrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects) and a given Enum structure to store grouped data in direct-access memory, enabling blazing-fast, secure iterations and modifications.\n- "
				},
				{
					"kind": "code",
					"text": "`Clock`"
				},
				{
					"kind": "text",
					"text": ": Simultaneously tracks two types of time, continuous and pausable. Pausable time stops ticking when the screen is inactive.\n\n[npm]: https://img.shields.io/npm/v/@pronotron/utils\n[npm-url]: https://www.npmjs.com/package/@pronotron/utils\n[build-size]: https://badgen.net/bundlephobia/minzip/@pronotron/utils\n[build-size-url]: https://bundlephobia.com/result?p=@pronotron/utils"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"children": [
				515,
				449,
				351
			]
		}
	],
	"packageName": "pronotron-tech-art-suite",
	"symbolIdMap": {
		"351": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/index.ts",
			"qualifiedName": ""
		},
		"352": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/IDPool.ts",
			"qualifiedName": "IDPool"
		},
		"353": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/IDPool.ts",
			"qualifiedName": "IDPool.__constructor"
		},
		"354": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/IDPool.ts",
			"qualifiedName": "IDPool"
		},
		"355": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/IDPool.ts",
			"qualifiedName": "capacityHint"
		},
		"356": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/IDPool.ts",
			"qualifiedName": "IDPool.consume"
		},
		"357": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/IDPool.ts",
			"qualifiedName": "IDPool.consume"
		},
		"358": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/IDPool.ts",
			"qualifiedName": "ID"
		},
		"359": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/IDPool.ts",
			"qualifiedName": "IDPool.get"
		},
		"360": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/IDPool.ts",
			"qualifiedName": "IDPool.get"
		},
		"361": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/IDPool.ts",
			"qualifiedName": "IDPool.release"
		},
		"362": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/IDPool.ts",
			"qualifiedName": "IDPool.release"
		},
		"363": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/IDPool.ts",
			"qualifiedName": "ID"
		},
		"364": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable"
		},
		"365": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.__constructor"
		},
		"366": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable"
		},
		"367": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.EnumType"
		},
		"368": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "stride"
		},
		"369": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "tableType"
		},
		"370": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "__type"
		},
		"371": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "__type"
		},
		"372": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "length"
		},
		"373": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "nodeCountHint"
		},
		"374": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.stride"
		},
		"375": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.table"
		},
		"376": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.usedSlots"
		},
		"377": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.add"
		},
		"378": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.add"
		},
		"379": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "ID"
		},
		"380": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "fullData"
		},
		"381": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.getData"
		},
		"382": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.getData"
		},
		"383": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "ID"
		},
		"384": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "dataKey"
		},
		"385": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.isExist"
		},
		"386": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.isExist"
		},
		"387": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "ID"
		},
		"388": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.modifyByID"
		},
		"389": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.modifyByID"
		},
		"390": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "ID"
		},
		"391": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "data"
		},
		"392": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.modifyByPosition"
		},
		"393": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.modifyByPosition"
		},
		"394": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "position"
		},
		"395": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "data"
		},
		"396": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.remove"
		},
		"397": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.remove"
		},
		"398": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "ID"
		},
		"399": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/native-control-table/NativeControlTable.ts",
			"qualifiedName": "NativeControlTable.EnumType"
		},
		"400": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "PronotronAnimator"
		},
		"401": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "PronotronAnimator.__constructor"
		},
		"402": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "PronotronAnimator"
		},
		"403": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "clock"
		},
		"404": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "nodeCountHint"
		},
		"405": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "PronotronAnimator.add"
		},
		"406": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "PronotronAnimator.add"
		},
		"407": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "animationOption"
		},
		"408": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "PronotronAnimator.remove"
		},
		"409": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "PronotronAnimator.remove"
		},
		"410": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "animationID"
		},
		"411": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "forced"
		},
		"412": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "PronotronAnimator.tick"
		},
		"413": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "PronotronAnimator.tick"
		},
		"414": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/clock/PronotronClock.ts",
			"qualifiedName": "PronotronClock"
		},
		"417": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/clock/PronotronClock.ts",
			"qualifiedName": "PronotronClock.getTime"
		},
		"418": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/clock/PronotronClock.ts",
			"qualifiedName": "PronotronClock.getTime"
		},
		"419": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/clock/PronotronClock.ts",
			"qualifiedName": "__type"
		},
		"420": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/clock/PronotronClock.ts",
			"qualifiedName": "__type.elapsedPausedTime"
		},
		"421": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/clock/PronotronClock.ts",
			"qualifiedName": "__type.elapsedTime"
		},
		"422": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/clock/PronotronClock.ts",
			"qualifiedName": "PronotronClock.pause"
		},
		"423": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/clock/PronotronClock.ts",
			"qualifiedName": "PronotronClock.pause"
		},
		"424": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/clock/PronotronClock.ts",
			"qualifiedName": "PronotronClock.resume"
		},
		"425": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/clock/PronotronClock.ts",
			"qualifiedName": "PronotronClock.resume"
		},
		"426": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/clock/PronotronClock.ts",
			"qualifiedName": "PronotronClock.tick"
		},
		"427": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/clock/PronotronClock.ts",
			"qualifiedName": "PronotronClock.tick"
		},
		"428": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "AnimationOption"
		},
		"429": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "__type"
		},
		"430": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "__type.autoPause"
		},
		"431": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "__type.delay"
		},
		"432": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "__type.duration"
		},
		"433": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/animator/PronotronAnimator.ts",
			"qualifiedName": "__type.id"
		},
		"434": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/Types.ts",
			"qualifiedName": "BinaryBoolean"
		},
		"435": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/Types.ts",
			"qualifiedName": "EnumValueMap"
		},
		"436": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/Types.ts",
			"qualifiedName": "E"
		},
		"437": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/Types.ts",
			"qualifiedName": "KeysOfUnion"
		},
		"438": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/Types.ts",
			"qualifiedName": "U"
		},
		"439": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/Types.ts",
			"qualifiedName": "MergedProps"
		},
		"440": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/Types.ts",
			"qualifiedName": "U"
		},
		"441": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/Types.ts",
			"qualifiedName": "RequireAtLeastOne"
		},
		"442": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/Types.ts",
			"qualifiedName": "T"
		},
		"443": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/Types.ts",
			"qualifiedName": "RequireAtLeastOneFromUnion"
		},
		"444": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/Types.ts",
			"qualifiedName": "U"
		},
		"445": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/Types.ts",
			"qualifiedName": "RequireExactlyOne"
		},
		"446": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/Types.ts",
			"qualifiedName": "T"
		},
		"447": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/isTouchDevice.ts",
			"qualifiedName": "isTouchDevice"
		},
		"448": {
			"packageName": "@pronotron/utils",
			"packagePath": "src/utils/isTouchDevice.ts",
			"qualifiedName": "isTouchDevice"
		},
		"449": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/index.ts",
			"qualifiedName": ""
		},
		"450": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Mouse.ts",
			"qualifiedName": "MouseController"
		},
		"451": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Mouse.ts",
			"qualifiedName": "MouseController.__constructor"
		},
		"452": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Mouse.ts",
			"qualifiedName": "MouseController"
		},
		"453": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Mouse.ts",
			"qualifiedName": "dependencies"
		},
		"454": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.canInteract"
		},
		"455": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.canInteract"
		},
		"456": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.getDelta"
		},
		"457": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.getDelta"
		},
		"458": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "__type"
		},
		"459": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "__type.x"
		},
		"460": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "__type.y"
		},
		"461": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.getPosition"
		},
		"462": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.getPosition"
		},
		"463": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "__type"
		},
		"464": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "__type.x"
		},
		"465": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "__type.y"
		},
		"466": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.getState"
		},
		"467": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.getState"
		},
		"468": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Mouse.ts",
			"qualifiedName": "MouseController.startEvents"
		},
		"469": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Mouse.ts",
			"qualifiedName": "MouseController.startEvents"
		},
		"470": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Mouse.ts",
			"qualifiedName": "MouseController.stopEvents"
		},
		"471": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Mouse.ts",
			"qualifiedName": "MouseController.stopEvents"
		},
		"472": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.updateSettings"
		},
		"473": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.updateSettings"
		},
		"474": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "settings"
		},
		"475": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Touch.ts",
			"qualifiedName": "TouchController"
		},
		"476": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Touch.ts",
			"qualifiedName": "TouchController.__constructor"
		},
		"477": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Touch.ts",
			"qualifiedName": "TouchController"
		},
		"478": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Touch.ts",
			"qualifiedName": "dependencies"
		},
		"479": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.canInteract"
		},
		"480": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.canInteract"
		},
		"481": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.getDelta"
		},
		"482": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.getDelta"
		},
		"483": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "__type"
		},
		"484": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "__type.x"
		},
		"485": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "__type.y"
		},
		"486": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.getPosition"
		},
		"487": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.getPosition"
		},
		"488": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "__type"
		},
		"489": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "__type.x"
		},
		"490": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "__type.y"
		},
		"491": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.getState"
		},
		"492": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.getState"
		},
		"493": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Touch.ts",
			"qualifiedName": "TouchController.startEvents"
		},
		"494": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Touch.ts",
			"qualifiedName": "TouchController.startEvents"
		},
		"495": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Touch.ts",
			"qualifiedName": "TouchController.stopEvents"
		},
		"496": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/Touch.ts",
			"qualifiedName": "TouchController.stopEvents"
		},
		"497": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.updateSettings"
		},
		"498": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "ModelController.updateSettings"
		},
		"499": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/model/ModelController.ts",
			"qualifiedName": "settings"
		},
		"500": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerBase.ts",
			"qualifiedName": "PointerBaseDependencies"
		},
		"501": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerBase.ts",
			"qualifiedName": "__type"
		},
		"502": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerBase.ts",
			"qualifiedName": "__type.animator"
		},
		"503": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerBase.ts",
			"qualifiedName": "__type.clock"
		},
		"504": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerBase.ts",
			"qualifiedName": "__type.isInteractable"
		},
		"505": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerBase.ts",
			"qualifiedName": "__type"
		},
		"506": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerBase.ts",
			"qualifiedName": "__type"
		},
		"507": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerBase.ts",
			"qualifiedName": "target"
		},
		"508": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerBase.ts",
			"qualifiedName": "__type.target"
		},
		"509": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerHoldable.ts",
			"qualifiedName": "PointerHoldableDependencies"
		},
		"510": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerHoldable.ts",
			"qualifiedName": "__type"
		},
		"511": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerHoldable.ts",
			"qualifiedName": "__type.isHoldable"
		},
		"512": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerHoldable.ts",
			"qualifiedName": "__type"
		},
		"513": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerHoldable.ts",
			"qualifiedName": "__type"
		},
		"514": {
			"packageName": "@pronotron/pointer",
			"packagePath": "src/core/PointerHoldable.ts",
			"qualifiedName": "target"
		},
		"515": {
			"packageName": "@pronotron/io",
			"packagePath": "src/index.ts",
			"qualifiedName": ""
		},
		"516": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOHorizontal.ts",
			"qualifiedName": "PronotronIOHorizontalObserver"
		},
		"517": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.__constructor"
		},
		"518": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOHorizontalObserver"
		},
		"519": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "nodeCountHint"
		},
		"520": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "useRounded"
		},
		"521": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOHorizontal.ts",
			"qualifiedName": "PronotronIOHorizontalObserver.direction"
		},
		"522": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.addNode"
		},
		"523": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.addNode"
		},
		"524": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "newNodeOptions"
		},
		"525": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOEventDispatcher.ts",
			"qualifiedName": "PronotronIOEventDispatcher.handleScroll"
		},
		"526": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOEventDispatcher.ts",
			"qualifiedName": "PronotronIOEventDispatcher.handleScroll"
		},
		"527": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOEventDispatcher.ts",
			"qualifiedName": "scrollValue"
		},
		"528": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.removeNode"
		},
		"529": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.removeNode"
		},
		"530": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "existingNodeRef"
		},
		"531": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.setLastScroll"
		},
		"532": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.setLastScroll"
		},
		"533": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "scrollValue"
		},
		"534": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.updatePositions"
		},
		"535": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.updatePositions"
		},
		"536": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "maximumValue"
		},
		"537": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.updateViewportLayout"
		},
		"538": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.updateViewportLayout"
		},
		"539": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "start"
		},
		"540": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "end"
		},
		"541": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOVertical.ts",
			"qualifiedName": "PronotronIOVerticalObserver"
		},
		"542": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.__constructor"
		},
		"543": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOVerticalObserver"
		},
		"544": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "nodeCountHint"
		},
		"545": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "useRounded"
		},
		"546": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOVertical.ts",
			"qualifiedName": "PronotronIOVerticalObserver.direction"
		},
		"547": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.addNode"
		},
		"548": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.addNode"
		},
		"549": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "newNodeOptions"
		},
		"550": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOEventDispatcher.ts",
			"qualifiedName": "PronotronIOEventDispatcher.handleScroll"
		},
		"551": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOEventDispatcher.ts",
			"qualifiedName": "PronotronIOEventDispatcher.handleScroll"
		},
		"552": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOEventDispatcher.ts",
			"qualifiedName": "scrollValue"
		},
		"553": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.removeNode"
		},
		"554": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.removeNode"
		},
		"555": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "existingNodeRef"
		},
		"556": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.setLastScroll"
		},
		"557": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.setLastScroll"
		},
		"558": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "scrollValue"
		},
		"559": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.updatePositions"
		},
		"560": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.updatePositions"
		},
		"561": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "maximumValue"
		},
		"562": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.updateViewportLayout"
		},
		"563": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "PronotronIOBase.updateViewportLayout"
		},
		"564": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "start"
		},
		"565": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOBase.ts",
			"qualifiedName": "end"
		},
		"566": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOHorizontal.ts",
			"qualifiedName": "IOHorizontalOptions"
		},
		"567": {
			"packageName": "@pronotron/io",
			"packagePath": "src/core/PronotronIOVertical.ts",
			"qualifiedName": "IOVerticalOptions"
		}
	},
	"files": {
		"entries": {
			"1": "../../packages/pronotron-utils",
			"2": "../../packages/pronotron-utils/src/index.ts",
			"3": "../../packages/pronotron-utils/README.md",
			"4": "../../packages/pronotron-pointer",
			"5": "../../packages/pronotron-pointer/src/index.ts",
			"6": "../../packages/pronotron-pointer/README.md",
			"7": "../../packages/pronotron-io",
			"8": "../../packages/pronotron-io/src/index.ts",
			"9": "../../packages/pronotron-io/README.md"
		},
		"reflections": {
			"1": 351,
			"2": 351,
			"3": 351,
			"4": 449,
			"5": 449,
			"6": 449,
			"7": 515,
			"8": 515,
			"9": 515
		}
	}
}
